import json
from fastapi import FastAPI
from ariadne import QueryType, MutationType, make_executable_schema
from ariadne.asgi import GraphQL
from schema import type_defs
from database import GraphDatabase
from graph.graphdirector import GraphDirector

# Load Graph into Memory
with open('graph.json', 'r') as file:
    graph_dict = json.load(file)
    graph = GraphDirector.construct(graph_dict)

# Initialize Query and Mutation Type
query = QueryType()
mutation = MutationType()

{% include 'query_resolvers.jinja' %}

{% include 'mutation_vertex_resolvers.jinja' %}

{% include 'mutation_edge_resolvers.jinja' %}

# Configuration
schema = make_executable_schema(type_defs, query, mutation)
app = FastAPI()

# Mount GraphQL as Sub-Application for FastAPI
app.mount('/graphql/', GraphQL(schema, debug=True))

# Run App
if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app='app:app', host='0.0.0.0', port=3000, reload=True)